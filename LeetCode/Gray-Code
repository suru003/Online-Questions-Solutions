# I noticed that the pattern can be generated by changing 'i'th bit in the revesed current list.
```
https://leetcode.com/problems/gray-code

Time Complexity: O(n*(2^n))
Since the outer loop runs for n times and the inner loop will run for the size of the current list(for worst case i.e. i=0, size of the list at that time will be 2^(n-1))

Space Complexity: O(2^n)
```

```
class Solution:
    def grayCode(self, nlen: int) -> List[int]:
        if(nlen==0):
            return []
        elif(nlen==1):
            return [0,1]
        else:
            ls = [["0" for r in range(nlen)],["0" for r in range(nlen)]]
            ls[1][nlen-1]="1"
            for i in range(nlen-2,-1,-1):
                tsize = len(ls)
                for k in range(tsize-1,-1,-1):
                    temp = list(ls[k])
                    temp[i]="1"
                    ls.append(temp)
                
            ans=[]
            for x in ls:
                ans.append(int("".join(x),2))
            return ans
```
